{"java":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public static final String SEP = \",\";\r\n\tprivate static final String NULL = \"null\";\r\n    public String serialize(TreeNode root) {\r\n        StringBuilder s = new StringBuilder();\r\n        if(root==null)return NULL;\r\n        Stack<TreeNode>stack = new Stack<TreeNode>();\r\n        stack.push(root);\r\n        while(!stack.isEmpty()){\r\n            TreeNode node=stack.pop();\r\n            s.append(node.val).append(SEP);\r\n            if(node.right!=null)stack.push(node.right);\r\n            if(node.left!=null)stack.push(node.left);\r\n        }\r\n        return s.toString();\r\n    }\r\n    \r\n    // Decodes your encoded data to tree.\r\n    public TreeNode deserialize(String data) {\r\n        if (data.equals(NULL)) return null;\r\n        String[] strs = data.split(SEP);\r\n        Queue<Integer> q = new LinkedList<>();\r\n        for (String e : strs) {\r\n            q.offer(Integer.parseInt(e));\r\n        }\r\n        return getNode(q);\r\n    }\r\n    private TreeNode getNode(Queue<Integer> q) { //q: 5,3,2,6,7\r\n        if(q.isEmpty())return null;\r\n        TreeNode root = new TreeNode(q.poll());\r\n        Queue<Integer>smallQueue = new LinkedList<>();\r\n        while(!q.isEmpty()&&q.peek()<=root.val){\r\n            smallQueue.offer(q.poll());\r\n        }\r\n        root.left = getNode(smallQueue);\r\n        root.right = getNode(q);\r\n        return root;\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));"}