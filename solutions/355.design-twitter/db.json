{"java":"public class Twitter {\r\n    public static int TIME_STAMP=0;\r\n\tpublic class tweet{\r\n\t\tint tweetId;\r\n\t\tint time;\r\n\t\ttweet next;\r\n\t\ttweet(int id){\r\n\t\t\ttweetId = id;\r\n\t\t\ttime = TIME_STAMP++;\r\n\t\t\tnext = null;\r\n\t\t}\r\n\t}\r\n\t\r\n    public class user{\r\n\r\n\t\t int userId;\r\n\t     Set<Integer>follows;\r\n\t     tweet head;\r\n\t     \r\n\t     public user(int id){\r\n\t    \t userId = id;\r\n\t    \t follows = new HashSet<>();\r\n\t    \t follow(id);\r\n\t    \t head = null;\r\n\t     }\r\n\t     \r\n\t     public void post(int tweetId){\r\n\t    \t tweet newTweet = new tweet(tweetId);\r\n\t    \t newTweet.next = this.head;\r\n\t    \t this.head = newTweet;\r\n\t     }\r\n\t     public void follow(int id){\r\n\t    \t follows.add(id);\r\n\t     }\r\n\t     public void unfollow(int id){\r\n\t    \t follows.remove(id);\r\n\t     }\r\n\t}\r\n\t\r\n\tMap<Integer,user>users;\r\n\t\r\n\t/** Initialize your data structure here. */\r\n    public  Twitter() {\r\n        users = new HashMap<Integer,user>();\r\n    }\r\n    \r\n    /** Compose a new tweet. */\r\n    public void postTweet(int userId, int tweetId) {\r\n    \tif(!users.containsKey(userId)){\r\n    \t\tuser u = new user(userId);\r\n    \t\tusers.put(userId, u);\t\r\n    \t}\r\n    \tuser u = users.get(userId);\r\n\t\tu.post(tweetId);\r\n    }\r\n    \r\n    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */\r\n    public List<Integer> getNewsFeed(int userId) {\r\n        List<Integer>result = new ArrayList<>();\r\n        if(!users.containsKey(userId))return result;\r\n        Set<Integer>follows = users.get(userId).follows;\r\n        PriorityQueue<tweet> pq = new PriorityQueue<>(users.size(),new Comparator<tweet>() {\r\n\t\t\t@Override\r\n\t\t\tpublic int compare(tweet o1, tweet o2) {\r\n\t\t\t\treturn o2.time-o1.time;\r\n\t\t\t}\r\n\t\t});\r\n        for(Integer u :follows){\r\n        \tuser user = users.get(u);\r\n        \tif(user.head!=null)pq.add(user.head);\r\n        }\r\n        int count=0;\r\n        while(!pq.isEmpty()&&count<10){\r\n        \ttweet t = pq.poll();\r\n        \tresult.add(t.tweetId);\r\n        \tcount++;\r\n        \tif(t.next!=null)pq.add(t.next);\r\n        }\r\n\t\treturn result;\r\n    }\r\n    \r\n    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */\r\n    public void follow(int followerId, int followeeId) {\r\n        if(!users.containsKey(followerId)){\r\n        \tuser u = new user(followerId);\r\n    \t\tusers.put(followerId, u);\t\r\n        }\r\n        if(!users.containsKey(followeeId)){\r\n        \tuser u = new user(followeeId);\r\n    \t\tusers.put(followeeId, u);\t\r\n        }\r\n        user u = users.get(followerId);\r\n        u.follow(followeeId);\r\n    }\r\n    \r\n    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */\r\n    public void unfollow(int followerId, int followeeId) {\r\n        if(!users.containsKey(followerId)||!users.containsKey(followeeId)||followerId==followeeId)return;\r\n        user u = users.get(followerId);\r\n        u.unfollow(followeeId);\r\n    }\r\n}\r\n\r\n/**\r\n * Your Twitter object will be instantiated and called as such:\r\n * Twitter obj = new Twitter();\r\n * obj.postTweet(userId,tweetId);\r\n * List<Integer> param_2 = obj.getNewsFeed(userId);\r\n * obj.follow(followerId,followeeId);\r\n * obj.unfollow(followerId,followeeId);\r\n */"}