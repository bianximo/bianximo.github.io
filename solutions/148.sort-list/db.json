{"java":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode sortList(ListNode head) {\r\n        if(head==null||head.next==null)return head;\r\n        ListNode slow = head;\r\n        ListNode fast = head;\r\n        while(fast.next!=null&&fast.next.next!=null){\r\n            slow = slow.next;\r\n            fast = fast.next.next;\r\n        }\r\n        ListNode last = slow.next;\r\n        slow.next = null;\r\n        ListNode l1 = sortList(head);\r\n        ListNode l2 = sortList(last);\r\n        return merge(l1,l2);\r\n    }\r\n    public ListNode merge(ListNode l1,ListNode l2){\r\n        if(l1==null)return l2;\r\n        if(l2==null)return l1;\r\n        ListNode newHead = new ListNode(-1);\r\n        ListNode current = newHead;\r\n        while(l1!=null&&l2!=null){\r\n            if(l1.val<l2.val){\r\n                current.next = l1;\r\n                l1 = l1.next;\r\n                current = current.next;\r\n            }else{\r\n                current.next = l2;\r\n                l2 = l2.next;\r\n                current = current.next;\r\n            }\r\n        }\r\n        while(l1!=null){\r\n            current.next = l1;\r\n                l1 = l1.next;\r\n                current = current.next;\r\n        }\r\n        while(l2!=null){\r\n            current.next = l2;\r\n                l2 = l2.next;\r\n                current = current.next;\r\n        }\r\n        return newHead.next;\r\n    }\r\n    \r\n}"}