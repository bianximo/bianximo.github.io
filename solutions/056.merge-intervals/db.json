{"java":"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() { start = 0; end = 0; }\r\n *     Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public List<Interval> merge(List<Interval> intervals) {\r\n\t\tList<Interval>list = new ArrayList<>();\r\n        Collections.sort(intervals,new Comparator<Interval>() {\r\n\t\t\t@Override\r\n\t\t\tpublic int compare(Interval arg0, Interval arg1) {\r\n\t\t\t\tif(arg0.start<arg1.start)return -1;\r\n\t\t\t\tif(arg0.start==arg1.start&&arg0.end<arg1.end){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif(arg0.start==arg1.start&&arg0.end==arg1.end)return 0;\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t});\r\n        int begin = 0,end = 0;\r\n        for(int i=0;i<intervals.size();i++){\r\n        \tbegin = intervals.get(i).start;\r\n        \tend = intervals.get(i).end;\r\n        \twhile(i<intervals.size()-1){\r\n        \t\tif(end<intervals.get(i+1).start){\r\n        \t\t\tbreak;\r\n        \t\t}\r\n        \t\telse if(end<=intervals.get(i+1).end){\r\n        \t\t\tend = intervals.get(i+1).end;\r\n        \t\t\ti = i+1;\r\n        \t\t}else{\r\n        \t\t\ti++;\r\n        \t\t}\r\n        \t}\r\n        \tInterval in = new Interval(begin, end);\r\n\t\t\tlist.add(in);\r\n        }\r\n\t\treturn list;\r\n    }\r\n}"}